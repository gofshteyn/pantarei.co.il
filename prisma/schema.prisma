generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model Language {
  id                 String    @id @db.Char(2)
  code               String?   @db.VarChar(3)
  displayName        String    @map("display_name") @db.VarChar(100)
  displayNameLocales Json?     @map("display_name_locales")
  imageUrl           String?   @map("image_url") @db.VarChar(255)
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime? @updatedAt @map("updated_at")
  deletedAt          DateTime? @map("deleted_at") @db.Timestamp
  locales            Locale[] // Связь с локализациями

  @@map("languages")
}

model Locale {
  languageId      String            @id @map("language_id") @db.Char(2)
  isDefault       Boolean           @default(false) @map("is_default")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime?         @updatedAt @map("updated_at")
  deletedAt       DateTime?         @map("deleted_at") @db.Timestamp
  language        Language          @relation(fields: [languageId], references: [id])
  ClientsPreorder ClientsPreorder[]

  @@unique([languageId, isDefault]) // Это будет гарантировать, что для одного языка можно иметь только одну локализацию по умолчанию
  @@map("locales")
}

model Currency {
  id                 String    @id @db.VarChar(4)
  displayName        String    @map("display_name") @db.VarChar(100)
  displayNameLocales Json?     @map("display_name_locales")
  symbol             String?   @db.Char(5)
  isDefault          Boolean   @default(false) @map("is_default")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime? @updatedAt @map("updated_at")
  deletedAt          DateTime? @map("deleted_at") @db.Timestamp
  Price              Price[]

  @@map("currencies") // Название таблицы в базе данных
}

model Price {
  id         String    @id @default(uuid()) @db.Char(36)
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String    @db.Uuid
  price      Decimal
  priceMode  PriceMode @default(exact)
  currency   Currency  @relation(fields: [currencyId], references: [id])
  currencyId String    @db.VarChar(4)
  startDate  DateTime
  endDate    DateTime?
  priceType  PriceType
  comment    String?   @db.Text

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  @@map("prices")
}

enum PriceType {
  sale
  purchase
}

enum PriceMode {
  exact // Точный
  from  // От
  to    // До
}

model CoursesGroup {
  id                 String    @id @default(uuid()) @db.Char(36)
  code               String?   @unique @db.VarChar(20)
  displayName        String    @map("display_name") @db.VarChar(100)
  displayNameLocales Json?     @map("display_name_locales")
  position           Int       @default(0)
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime? @updatedAt @map("updated_at")
  deletedAt          DateTime? @map("deleted_at") @db.Timestamp
  courses            Course[]  @relation("GroupCourses")

  @@map("courses_groups")
}

model Course {
  id                 String             @id @default(uuid()) @db.Char(36)
  code               String?            @unique @db.VarChar(20)
  courseGroupId      String?            @db.Char(36)
  group              CoursesGroup?      @relation("GroupCourses", fields: [courseGroupId], references: [id])
  productId          String             @db.Uuid
  product            Product            @relation("CourseProduct", fields: [productId], references: [id])
  displayName        String             @map("display_name") @db.VarChar(100)
  displayNameLocales Json?              @map("display_name_locales")
  subtitle           String?            @map("subtitle") @db.VarChar(100)
  subtitleLocales    Json?              @map("subtitle_locales")
  description        String?            @db.Text
  descriptionLocales Json?              @map("description_locales")
  position           Int                @default(0)
  logoUrl            String?            @map("logo_url") @db.VarChar(255)
  imageUrl           String?            @map("image_url") @db.VarChar(255)
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime?          @updatedAt @map("updated_at")
  deletedAt          DateTime?          @map("deleted_at") @db.Timestamp
  features           CourseFeature[]
  inclusions         CourseInclusion[]
  suggestions        CourseSuggestion[]

  @@map("courses")
}

model CourseFeature {
  id                 String    @id @default(uuid()) @db.Char(36)
  courseId           String    @db.Char(36)
  course             Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  description        String    @db.VarChar(255) // Например, "Время в воде 30 минут"
  descriptionLocales Json?     @map("description_locales")
  position           Int       @default(0) // Порядок отображения
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime? @updatedAt @map("updated_at")
  deletedAt          DateTime? @map("deleted_at") @db.Timestamp

  @@map("courses_features")
}

model CourseInclusion {
  id                 String    @id @default(uuid()) @db.Char(36)
  courseId           String    @db.Char(36)
  course             Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  description        String    @db.VarChar(255) // Например, "Снаряжение"
  descriptionLocales Json?     @map("description_locales")
  position           Int       @default(0) // Порядок отображения
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime? @updatedAt @map("updated_at")
  deletedAt          DateTime? @map("deleted_at") @db.Timestamp

  @@map("courses_inclusions")
}

model CourseSuggestion {
  id                 String    @id @default(uuid()) @db.Char(36)
  courseId           String    @db.Char(36)
  course             Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  description        String    @db.VarChar(255) // Например, "Фонарь"
  descriptionLocales Json?     @map("description_locales")
  position           Int       @default(0) // Порядок отображения
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime? @updatedAt @map("updated_at")
  deletedAt          DateTime? @map("deleted_at") @db.Timestamp

  @@map("courses_suggestions")
}

model ProductsGroup {
  id                 String    @id @default(uuid()) @db.Char(36)
  code               String?   @unique @db.VarChar(20)
  displayName        String    @map("display_name") @db.VarChar(100)
  displayNameLocales Json?     @map("display_name_locales")
  position           Int       @default(0)
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime? @updatedAt @map("updated_at")
  deletedAt          DateTime? @map("deleted_at") @db.Timestamp
  products           Product[] @relation("GroupProducts")

  @@map("products_groups")
}

model Product {
  id                 String            @id @default(uuid()) @db.Uuid
  code               String?           @unique @db.VarChar(20)
  productGroupId     String?           @db.Char(36)
  group              ProductsGroup?    @relation("GroupProducts", fields: [productGroupId], references: [id])
  courses            Course[]          @relation("CourseProduct")
  excursions         Excursion[]       @relation("ExcursionProduct")
  displayName        String            @map("display_name") @db.VarChar(100)
  displayNameLocales Json?             @map("display_name_locales")
  description        String?           @db.Text
  descriptionLocales Json?             @map("description_locales")
  position           Int               @default(0)
  imageUrl           String?           @map("image_url") @db.VarChar(255)
  isService          Boolean           @default(false) @map("is_service") @db.Boolean
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime?         @updatedAt @map("updated_at")
  deletedAt          DateTime?         @map("deleted_at") @db.Timestamp
  preorders          ClientsPreorder[]
  Price              Price[]

  @@map("products")
}

model ClientsPreorder {
  id               String         @id @default(uuid()) @map("id") @db.Uuid
  registrationDate DateTime       @default(now()) @map("registration_date")
  userId           String?        @map("user_id") @db.Uuid
  firstName        String?        @map("first_name") @db.VarChar(100)
  lastName         String?        @map("lastName") @db.VarChar(100)
  phone            String?        @map("phone") @db.VarChar(15)
  email            String?        @map("email") @db.VarChar(255)
  comment          String?        @db.Text
  productId        String         @map("product_id") @db.Uuid
  localeId         String?        @map("locale_id") @db.Char(2)
  isMediaRequired  Boolean        @default(false) @map("is_media_required")
  status           PreorderStatus @default(pending) @map("status")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime?      @updatedAt @map("updated_at")
  deletedAt        DateTime?      @map("deleted_at")

  // Связи с таблицами
  locale  Locale? @relation(fields: [localeId], references: [languageId])
  product Product @relation(fields: [productId], references: [id])

  @@map("clients_preorders")
}

model Excursion {
  id                 String                @id @default(uuid()) @db.Char(36)
  code               String?               @unique @db.VarChar(20)
  productId          String                @db.Uuid
  product            Product               @relation("ExcursionProduct", fields: [productId], references: [id])
  displayName        String                @map("display_name") @db.VarChar(100)
  displayNameLocales Json?                 @map("display_name_locales")
  subtitle           String?               @map("subtitle") @db.VarChar(100)
  subtitleLocales    Json?                 @map("subtitle_locales")
  description        String?               @map("description") @db.Text
  descriptionLocales Json?                 @map("description_locales")
  position           Int                   @default(0)
  logoUrl            String?               @map("logo_url") @db.VarChar(255)
  imageUrl           String?               @map("image_url") @db.VarChar(255)
  createdAt          DateTime              @default(now()) @map("created_at")
  updatedAt          DateTime?             @updatedAt @map("updated_at")
  deletedAt          DateTime?             @map("deleted_at") @db.Timestamp
  features           ExcursionFeature[]
  inclusions         ExcursionInclusion[]
  suggestions        ExcursionSuggestion[]

  @@map("excursions")
}

model ExcursionFeature {
  id                 String    @id @default(uuid()) @db.Char(36)
  excursionId        String    @db.Char(36)
  excursion          Excursion @relation(fields: [excursionId], references: [id], onDelete: Cascade)
  description        String    @db.VarChar(255) // Например, "Доступно детям от 8 лет"
  descriptionLocales Json?     @map("description_locales")
  position           Int       @default(0) // Порядок отображения
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime? @updatedAt @map("updated_at")
  deletedAt          DateTime? @map("deleted_at") @db.Timestamp

  @@map("excursions_features")
}

model ExcursionInclusion {
  id                 String    @id @default(uuid()) @db.Char(36)
  excursionId        String    @db.Char(36)
  excursion          Excursion @relation(fields: [excursionId], references: [id], onDelete: Cascade)
  description        String    @db.VarChar(255) // Например, "Страховка"
  descriptionLocales Json?     @map("description_locales")
  position           Int       @default(0) // Порядок отображения
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime? @updatedAt @map("updated_at")
  deletedAt          DateTime? @map("deleted_at") @db.Timestamp

  @@map("excursions_inclusions")
}

model ExcursionSuggestion {
  id                 String    @id @default(uuid()) @db.Char(36)
  excursionId        String    @db.Char(36)
  excursion          Excursion @relation(fields: [excursionId], references: [id], onDelete: Cascade)
  description        String    @db.VarChar(255) // Например, "Бутылка воды"
  descriptionLocales Json?     @map("description_locales")
  position           Int       @default(0) // Порядок отображения
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime? @updatedAt @map("updated_at")
  deletedAt          DateTime? @map("deleted_at") @db.Timestamp

  @@map("excursions_suggestions")
}

// Enum для статусов предзаказа
enum PreorderStatus {
  pending   @map("pending")
  confirmed @map("confirmed")
  cancelled @map("cancelled")
  completed @map("completed")

  @@map("preorder_status")
}
