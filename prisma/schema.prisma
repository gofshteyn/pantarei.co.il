generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model Language {
  id                 String    @id @db.Char(2)
  code               String?   @db.VarChar(3)
  displayName        String    @map("display_name") @db.VarChar(100)
  displayNameLocales Json?     @map("display_name_locales")
  imageUrl           String?   @map("image_url") @db.VarChar(255)
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime? @updatedAt @map("updated_at")
  deletedAt          DateTime? @map("deleted_at") @db.Timestamp
  locales            Locale[] // Связь с локализациями

  @@map("languages")
}

model Locale {
  languageId      String            @id @map("language_id") @db.Char(2)
  isDefault       Boolean           @default(false) @map("is_default")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime?         @updatedAt @map("updated_at")
  deletedAt       DateTime?         @map("deleted_at") @db.Timestamp
  language        Language          @relation(fields: [languageId], references: [id])
  ClientsPreorder ClientsPreorder[]

  @@unique([languageId, isDefault]) // Это будет гарантировать, что для одного языка можно иметь только одну локализацию по умолчанию
  @@map("locales")
}

model Currency {
  id                 String    @id @db.VarChar(4)
  displayName        String    @map("display_name") @db.VarChar(100)
  displayNameLocales Json?     @map("display_name_locales")
  symbol             String?   @db.Char(5)
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime? @updatedAt @map("updated_at")
  deletedAt          DateTime? @map("deleted_at") @db.Timestamp

  @@map("currencies") // Название таблицы в базе данных
}

model CoursesGroup {
  id                 String    @id @default(uuid()) @db.Char(36)
  code               String?   @unique @db.VarChar(20)
  displayName        String    @map("display_name") @db.VarChar(100)
  displayNameLocales Json?     @map("display_name_locales")
  position           Int       @default(0)
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime? @updatedAt @map("updated_at")
  deletedAt          DateTime? @map("deleted_at") @db.Timestamp
  courses            Course[]  @relation("GroupCourses")

  @@map("courses_groups")
}

model Course {
  id                 String        @id @default(uuid()) @db.Char(36)
  code               String?       @unique @db.VarChar(20)
  courseGroupId      String?       @db.Char(36)
  coursesGroup       CoursesGroup? @relation("GroupCourses", fields: [courseGroupId], references: [id])
  displayName        String        @map("display_name") @db.VarChar(100)
  displayNameLocales Json?         @map("display_name_locales")
  subtitle           String?       @map("subtitle") @db.VarChar(100)
  subtitleLocales    Json?         @map("subtitle_locales")
  description        String?       @db.Text
  descriptionLocales Json?         @map("description_locales")
  position           Int           @default(0)
  imageUrl           String?       @map("image_url") @db.VarChar(255)
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime?     @updatedAt @map("updated_at")
  deletedAt          DateTime?     @map("deleted_at") @db.Timestamp

  @@map("courses")
}

model ClientsPreorder {
  id               String         @id @default(uuid()) @map("id") @db.Uuid
  registrationDate DateTime       @default(now()) @map("registration_date")
  userId           String?        @map("user_id") @db.Uuid
  displayName      String         @map("display_name") @db.VarChar(255)
  phone            String?        @map("phone") @db.VarChar(15)
  email            String?        @map("email") @db.VarChar(255)
  productId        String         @map("product_id") @db.Uuid
  localeId         String?        @map("locale_id") @db.Char(2)
  isMediaRequired  Boolean        @default(false) @map("is_media_required")
  status           PreorderStatus @default(pending) @map("status")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime?      @updatedAt @map("updated_at")
  deletedAt        DateTime?      @map("deleted_at")

  // Связи с таблицами
  locale Locale? @relation(fields: [localeId], references: [languageId])

  @@map("clients_preorders")
}

// Enum для статусов предзаказа
enum PreorderStatus {
  pending   @map("pending")
  confirmed @map("confirmed")
  cancelled @map("cancelled")
  completed @map("completed")

  @@map("preorder_status")
}
